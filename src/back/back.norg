* /src/back/back.norg/

* outline
  the backend of the program, handles reading & writing to files and that kinda stuff

* Config 
** links
   {/ ~/repos/ntask/src/back/Config.cpp}[Config.cpp]
   {/ ~/repos/ntask/src/back/Config.h}[Config.h]

** Read()
   reads and parses the {/ ~/.config/norgtask/config}[config file] into a hashmap
   the format of the file is:
   @code cfg
   # comment, lines starting with '#' are ignored
   # THERE CAN ONLY BE ONE SPACE AT A TIME
   # SO DONT DO THIS: 'var-type   var-name value'
   var-type var-name value
   @end
   var-type can be: \{path, int, str\}
   the variable name will never contain spaces
   current options:
   @code cfg
   path workspace ~/wiki/ (the directory in which all of your norg files are (program will only read the files that are nested one folder lower than this))
   @end
   internally, Database will store multiple hashmaps: one for each var type

** get_path()
   takes the name of a path variable, and returns it as a std::filesystem::path

** get_int()
   takes the name of an int var, and returns it's integer value

** get_str()
   takes the name of a string var, and returns a string

* Tasklist
  basically just has a list of all tasks, and has methods to access and modify them
  should be able to reload tasks from source seamlessly, meaning that it reads deterministically

* Timestamp
  a class that represemts a timestamp, allowing conversion to many formats useful to this project
** links
   {/ ~/repos/ntask/src/back/Timestamp.cpp}[Timestamp.cpp]
   {/ ~/repos/ntask/src/back/Timestamp.h}[Timestamp.h]

** Timestamp()
   inits to current time
** Timestamp(long unixtime)
** Timestamp(string datestr) "2023.10.19*08:30"
** Timestamp(bool future)
   inits to futuretime, if true, 0time if false

** get_unixtime()
   a long containing seconds since epoch
** get_year()
   int '2023'
** get_month()
   int '1-12'
** get_date()
   int '1-31'
** get_day()
   int '1-7' (1 being monday)
** get_hour()
   int '0-23'
** get_min()
   int '0-59'
** is_future()
   checks if the date is equal to the future date

* Task
  a class representing one task, with methods to access its data and modify it as well
  keeps track of all its data, and also what file
** links
   {/ ~/repos/ntask/src/back/Task.cpp}[Task.cpp]
   {/ ~/repos/ntask/src/back/Task.h}[Task.h]

** get_name()
   returns the name of the task

** get_tag()
   returns the tag of the task

** get_date()
   returns the important date of the task:
   - if the task is not done, returns the due date
   - if the task is done, returns the date it was finished

** is_done()
   boolean, true if this task is done, false if it still needs to be completed

** get_folder()
   returns the name of the folder that the task is in

** get_file()
   returns the filename of the norg file the task is in

** Complete()
   changes the task to done
   gets the current date, and writes it into the task definition

** Task(string line, path source_file)
   takes a string containing the contents of a @code rust task block (no newlines)
   takes the path to its source file so that it can edit itself later
   resets all internal variables, and sets them to whatever the passed string specifies
   @code rust exampletask
   "task name"
   <tag>
   {2020.12.30} // due date
   [2020.12.29*23:54] // done date
   @end

** Write(bool replace_which\[4\])
   in its source file, finds the code block that defines it
   and replaces its contents with whatever the current state of the task is
   the array means which fields to write: \{ name, due, done, tag \}
